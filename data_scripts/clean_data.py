import pandas as pd
import glob

def get_df(malware_type):
    # Strategy found here: https://stackoverflow.com/questions/20906474/import-multiple-csv-files-into-pandas-and-concatenate-into-one-dataframe#21232849
    # This section will find the given directory (malware_type, such as Benign or Adware)
    print("Importing {} data...".format(malware_type))
    path ='malware_dataset/{}'.format(malware_type)

    # Select every csv file that is 2 levels deep into this tree structure
    allFiles = glob.glob(path + "/*/*.csv")

    # Initialize a dataframe and list object
    frame = pd.DataFrame()
    list_ = []

    # Read in every csv file that we've found, put it in a dataframe and add it to the list
    for file_ in allFiles:
        df = pd.read_csv(file_,index_col=None, header=0)
        list_.append(df)

    # This takes the list of dataframe objects and combines them into one dataframe
    frame = pd.concat(list_)
    
    # Rename dataframe and change index of samples
    df = frame
    df.index = df['Flow ID']
    del df['Flow ID']
    
    # Remove the spaces in front of some of the column names
    #  Without this, it is really annoying to try to pull up a column with random spaces in the front
    print('Renaming columns with spaces...')
    cols = {}
    for name in df.columns:
        if name[0] is ' ':
            cols[name] = name[1:]
    df.rename(cols, axis=1, inplace=True, errors='raise')
    
    # These are the attributes that we are going to hold on to, discard the rest.
    #   Motivation provided from Lashkari's paper.
    #
    # 1) Maximum flow packet length F 14 -> Flow IAT Max
    # 2) Minimum flow packet length F 14 -> Flow IAT Min
    # 3) Backward variance data bytes F 15 -> Bwd Packet Length Std (Can't find the variance, so using this instead since it is related)
    # 4) Flow FIN F 17 -> FIN Flag Count
    # 5) Flow forward bytes F 18 -> Fwd IAT Total
    # 6) Flow backward bytes F 19 -> Bwd IAT Total
    # 7) Maximum Idle F 20 -> Idle Max
    # 8) Initial window forward F 21 -> Init_Win_bytes_forward
    # 9) Minimum segment size forward F 23 -> min_seg_size_forward
    
    cols_to_keep = ['Flow IAT Max',
                    'Flow IAT Min',
                    'Bwd Packet Length Std', 
                    'FIN Flag Count', 
                    'Fwd IAT Total', 
                    'Bwd IAT Total',
                    'Idle Max',
                    'Init_Win_bytes_forward',
                    'min_seg_size_forward',
                    'Label']

    print('Dropping unnecessary columns...')
    df.drop(columns=[col for col in df.columns if col not in cols_to_keep], inplace=True, errors='raise') # Some systems raise an error about this errors='raise' argument (which is ironic, I guess). Feel free to remove it if need be.
    df.dropna(inplace=True)
    
    print('{} cleaned\n\tCreating general csv...'.format(malware_type))
    df.to_csv('malware_dataset/{}_cleaned.csv'.format(malware_type))

    # The process below isn't necessary if we are importing benign traffic since there is only one type of benign traffic in the dataset
    if malware_type != 'Benign':
      # Copy the dataframe over because we have other uses for the original later on
      df1 = df.copy()

      # The labels are ADWARE_SHINAUT (for example). For this type of categorized file, we want an "Adware species" file that contains all of the labels such as SHINAUT or whatever else is here. The label of 'unlabeled' will indicate that it is a general Adware (example) and should be ridden of.
      df1['Label_categorized_2'] = df1['Label'].map(lambda val : val.split('_')[1] if len(val.split('_')) > 1 else 'unlabeled')
      df1 = df1[ df1['Label_categorized_2'] != 'unlabeled' ]

      print('\tCreating {} species csv...'.format(malware_type))
      df1.to_csv('malware_dataset/{}_species.csv'.format(malware_type))

    return df
    
def create_large_df(types):
    # We are going to have a list of dataframes here
    df_list = []
    for typ in types:
        # Parse the data files (there's a lot to do) and give me a dataframe back
        df_typ = get_df(typ)

        # Throw the df onto the pile of dfs
        df_list.append(df_typ)

    # Put all of these dataframes into one huge dataframe and send it back to the shop
    return pd.concat(df_list)

if __name__ == '__main__':
    # These are all of the types of directories we will parse through (and these are the data types we are importing)
    types = ['Adware', 'Benign', 'Scareware', 'Ransomware', 'SMSmalware']

    # Go grab me a large dataframe with all this info
    df = create_large_df(types)

    # Remove anything that is just labeled as "malware". It's not cool enough to be part of the party.
    df = df[ df['Label'] != 'MALWARE' ]
    print('Writing full dataset to csv...')
    df.to_csv('malware_dataset/complete_dataset_cleaned.csv')

    # Since the data is coming in as ADWARE_GOOLIGAN (example), we want to make a datafile where the label is only ADWARE
    print('Creating categorized dataset...')
    df['Label_categorized_1'] = df['Label'].map(lambda val : val.split('_')[0])
    del df['Label']
    print('Writing categorized dataset to csv...')
    df.to_csv('malware_dataset/complete_categorized_dataset_cleaned.csv')

    # If the label for the data is not "BENIGN", then the sample is malicious and should be labeled as such (1). If it is benign, then it is a 0. Thus, is this piece of network data representative of a malicious piece of traffic? 0 -> no, 1 -> yes.
    print('Creating binarized dataset...')
    df['Label_binarized'] = df['Label_categorized_1'].map(lambda val : 0 if val == 'BENIGN' else 1)
    del df['Label_categorized_1']
    print('Writing binarized dataset to csv...')
    df.to_csv('malware_dataset/complete_binarized_dataset_cleaned.csv')

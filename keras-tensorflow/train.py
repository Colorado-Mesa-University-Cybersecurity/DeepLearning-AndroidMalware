#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np

from keras.models import Sequential, load_model
from keras.layers import Dense, Activation
from keras.metrics import BinaryAccuracy, TruePositives, TrueNegatives, FalsePositives, FalseNegatives
from sklearn.model_selection import StratifiedKFold, train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.utils.np_utils import to_categorical, normalize
from sklearn.utils import shuffle

print('Imports complete')

df = pd.read_csv('../../malware_dataset/complete_binarized_dataset_cleaned.csv', index_col=0)
df.head()

df['Label_binarized'].value_counts()

dep_var = 'Label_binarized'
model_name = 'init'
cont_names = list( set(df.columns) - set([dep_var]) )
#print(cont_names)

df_y = df[dep_var]
del df[dep_var]

encoder = LabelEncoder()
encoder.fit(df_y)
data_y = encoder.transform(df_y)
data_x = (df - df.mean()) / (df.max() - df.min())
data_x = data_x.values

fold_num = 1
total_folds = 10

accuracy = BinaryAccuracy()
tp = TruePositives()
tn = TrueNegatives()
fp = FalsePositives()
fn = FalseNegatives()
metrics = [accuracy, tp, tn, tp, fn]

for train_idx, test_idx in StratifiedKFold(total_folds).split(data_x, data_y):
    print('Fold {}/{}'.format(fold_num, total_folds))
    fold_num += 1

    X_train, X_test = data_x[train_idx], data_x[test_idx]
    y_train, y_test = data_y[train_idx], data_y[test_idx]

    # The model must be reinitialized otherwise the model will have trained on all of the data (that wouldn't be true 10-fold cv)
    model = Sequential()
    model.add(Dense(32, activation='relu', input_shape=(9,)))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='softmax'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=metrics)
    model.fit(x=X_train, y=y_train, epochs=1, batch_size=10, verbose=2, validation_data=(X_test, y_test))
    
scores = model.evaluate(X_test, y_test, verbose=1)
print(model.metrics_names)
acc, loss = scores[1]*100, scores[0]*100
print('Baseline: accuracy: {:.2f}%: loss: {:2f}'.format(acc, loss))


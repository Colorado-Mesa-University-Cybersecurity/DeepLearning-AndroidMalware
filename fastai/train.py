#!/bin/python3

from fastai.tabular import *
from fastai.metrics import Recall, Precision
import pandas as pd
import numpy as np
from sklearn.model_selection import StratifiedKFold, train_test_split, StratifiedShuffleSplit
from sklearn.preprocessing import LabelEncoder
from sklearn.utils import shuffle

print('Imports complete')

df = pd.read_csv('../../malware_dataset/complete_binarized_dataset_cleaned.csv', index_col=0)
df.head()

procs = [FillMissing, Categorify, Normalize]
#sss = StratifiedShuffleSplit(n_splits=10, test_size=0.2, random_state=1)
#print(sss)

dep_var = 'Label_binarized'
cont_names = list(set(df.columns) - set([dep_var]))

#data_x = df

df_y = df[dep_var]
del df[dep_var]

encoder = LabelEncoder()
encoder.fit(df_y)
data_y = encoder.transform(df_y)
data_x = (df - df.mean()) / (df.max() - df.min())
data_x = data_x.values

metrics = [accuracy, Recall(), Precision()]

fold_num = 1
total_folds = 10
for train_idx, test_idx in StratifiedKFold(total_folds).split(data_x, data_y):
    data_fold = (TabularList.from_df(df, path='../../malware_dataset/complete_binarized_dataset_cleaned.csv', cont_names=cont_names, procs=procs)
                .split_by_idxs(train_idx, test_idx)
                .label_from_df(cols='Label_binarized')
                .databunch())
    model = tabular_learner(data_fold, layers=[256, 256], metrics=metrics, callback_fns=ShowGraph, ps=0.5)
    model.fit_one_cycle(cyc_len=1)

